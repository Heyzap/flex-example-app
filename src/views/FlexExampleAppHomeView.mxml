<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:components="views.components.*" xmlns:mx="library://ns.adobe.com/flex/spark"
        title="Heyzap Test Application"
        creationComplete="onCreationComplete()"
        >

    <fx:Style>
        @namespace s "library://ns.adobe.com/flex/spark";

    </fx:Style>

    <fx:Script>
		<![CDATA[
        import com.heyzap.sdk.ads.HeyzapAds;
        import com.heyzap.sdk.ads.IncentivizedAd;
        import com.heyzap.sdk.ads.InterstitialAd;
        import views.components.FyberTextInput;
        import com.heyzap.sdk.ads.BannerAd;

        import model.AppModel;

        [Bindable]
        public var appModel:AppModel;

        private var currentActionObject:*;

        override public function set data(value:Object):void {
            appModel = value as AppModel;
        }

        private function onStartButtonClick():void {
            var publisherID:String = publisherIDTextInput.text;
            logConsole.showLine("publisherID: '" + publisherID + "'");

            if (publisherID == "") {
                logConsole.showLine("You must enter a publisher ID.");
                return;
            }

            publisherIDTextInput.enabled = false;

            autofetchCheckbox.enabled = false;
            startButton.enabled = false;

            fetchButton.enabled = true;
            showButton.enabled = true;
            availableButton.enabled = true;

            actionTypeRadioButtonGroup.enabled = true;

            var flags:int = autofetchCheckbox.selected ? HeyzapAds.FLAG_NONE : HeyzapAds.FLAG_DISABLE_AUTOMATIC_FETCH;
            HeyzapAds.getInstance().start(publisherID, flags, "magicTestApp" /* sets this device as a test device with HeyzapAds.addTestDevice()*/);
        }

        private function onTestSuiteButtonClick():void {
            HeyzapAds.getInstance().showMediationTestSuite();
        }

        private function onCreationComplete():void {
            currentActionObject = InterstitialAd.getInstance();
        }

        private function getEnteredAdTagOrNull():String{
            return adTagTextInput.text?adTagTextInput.text:null;
        }

        private function onFetchButtonClick():void {
            logConsole.showLine("Fetching...");
            currentActionObject.fetch(getEnteredAdTagOrNull());
        }

        private function onShowButtonClick():void {
            logConsole.showLine("Showing...");
            currentActionObject.show(getEnteredAdTagOrNull());
        }

        private function onAvailableButtonClick():void {
            logConsole.showLine("Available? result: " + currentActionObject.isAvailable(getEnteredAdTagOrNull()));
        }

        /// Banners

        private function onShowBannerButtonClick():void {
            var position:String = bannerTopRadioButton.selected ? BannerAd.POSITION_TOP : BannerAd.POSITION_BOTTOM;
            BannerAd.getInstance().show(position, getEnteredAdTagOrNull());
        }
        private function onHideBannerButtonClick():void {
            BannerAd.getInstance().hide();
        }
        private function onDestroyBannerButtonClick():void {
            BannerAd.getInstance().destroy();
        }

        private function enableAllButtons():void {
            fetchButton.enabled = true;
            showButton.enabled = true;
            showButton.visible = true;
            availableButton.enabled = true;
        }

        //in case we have banner shown we need to hide it before
        private function onActionTypeGroupSelectionChange(event:Event):void {
            if (interstitialRadioButton.selected) {
                currentActionObject = InterstitialAd.getInstance();
            } else if (incentivizedRadioButton.selected) {
                currentActionObject = IncentivizedAd.getInstance();
            } else if (bannerRadioButton.selected) {
                currentActionObject = BannerAd.getInstance();
            }

            showAppropriateControls();
        }

        private function showAppropriateControls():void {
            bannerControlsGroup.visible = bannerRadioButton.selected;
            nonBannerControlsGroup.visible = !bannerRadioButton.selected;
        }

        private function onBannerPositionSelectionChange(event:Event):void {

        }


        ]]>
	</fx:Script>

    <fx:Declarations>
        <s:RadioButtonGroup id="actionTypeRadioButtonGroup"
                            change="onActionTypeGroupSelectionChange(event)" enabled="false"/>
        <s:RadioButtonGroup id="bannerPositionRadioButtonGroup"
                            change="onBannerPositionSelectionChange(event)"/>

    </fx:Declarations>


    <s:Scroller width="100%" height="100%">
        <s:VGroup width="100%" height="100%"
                  paddingLeft="6" paddingRight="6" paddingBottom="6" paddingTop="6" horizontalAlign="left">

            <s:HGroup width="100%" verticalAlign="middle">
                <s:Label text="Publisher ID:"/>
                <components:FyberTextInput id="publisherIDTextInput" width="60%" text="1234"/>
            </s:HGroup>

            <s:HGroup  width="100%" verticalAlign="middle">
                <s:CheckBox id="autofetchCheckbox" label="Autofetch"/>
            </s:HGroup>

            <s:HGroup  width="100%" verticalAlign="middle">
                <s:Button id="startButton" label="Start" click="onStartButtonClick()"/>
                <s:Button id="testSuiteButton" label="Test Suite" click="onTestSuiteButtonClick()"/>
                <s:Label text="Ad tag:"/>
                <components:FyberTextInput id="adTagTextInput" width="30%"/>
            </s:HGroup>



                <s:RadioButton id="interstitialRadioButton" label="Interstitial" group="{actionTypeRadioButtonGroup}" selected="true" />
                <s:RadioButton id="incentivizedRadioButton" label="Incentivized" group="{actionTypeRadioButtonGroup}"/>
                <s:RadioButton id="bannerRadioButton"       label="Banner"       group="{actionTypeRadioButtonGroup}"/>

            <s:HGroup width="100%" id="nonBannerControlsGroup">
                <s:Button id="fetchButton" label="Fetch" click="onFetchButtonClick()" enabled="false"/>
                <s:Group>
                    <s:Button id="showButton" label="Show" visible="{!appModel.bannerIsShown}" click="onShowButtonClick()" enabled="false"/>

                </s:Group>
                <s:Button id="availableButton" label="Available?" click="onAvailableButtonClick()" enabled="false"/>
            </s:HGroup>

            <s:VGroup width="100%" id="bannerControlsGroup" visible="false">
                <s:HGroup width="100%" >
                    <s:RadioButton id="bannerTopRadioButton" label="Top" group="{bannerPositionRadioButtonGroup}" selected="true" />
                    <s:RadioButton id="bannerBottomRadioButton" label="Bottom" group="{bannerPositionRadioButtonGroup}"/>
                </s:HGroup>

                <s:HGroup width="100%" >
                    <s:Button id="showBannerButton" label="Show" click="onShowBannerButtonClick()"/>
                    <s:Button id="hideBannerButton" label="Hide" click="onHideBannerButtonClick()"/>
                    <s:Button id="destroyBannerNutton" label="Destroy" click="onDestroyBannerButtonClick()"/>
                </s:HGroup>
            </s:VGroup>







            <!--s:CheckBox id="showLogsCheckBox" label="Show debug logs" selected="@{appModel.showLogs}"/-->

            <s:BorderContainer width="100%" height="100%" minHeight="400"  >
                <components:LogConsole id="logConsole" width="100%" height="100%" />
            </s:BorderContainer>


        </s:VGroup>
    </s:Scroller>
</s:View>
